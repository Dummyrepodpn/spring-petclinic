pipeline {
    agent { label 'JDK_17' }
    triggers { pollSCM('* * * * *') }
    parameters { choice(name: 'choice', choices: ['clean install', 'clean package','deploy'], description: 'test with choice') }
    environment { 
        SONAR_TOKEN = credentials('SONAR_ID')  // Ensure this credential is added in Jenkins
        SONAR_PROJECT_KEY = 'spring19'
        SONAR_ORGANIZATION = 'spring19'
        MAVEN_TOOL = 'MAVEN_DEFAULT' // Your configured Maven tool in Jenkins
    }
    stages {
        stage('vcn') {
            steps {
                 git url: 'https://github.com/Dummyrepodpn/spring-petclinic.git',
                     branch: 'main'
            }
        }
        stage ('Artifactory configuration') {
            steps {
                rtServer (
                    id: "ARTIFACTORY_SERVER",
                    url: 'https://dpntest.jfrog.io/artifactory',
                    credentialsId: 'JFROG_CLOUD'
                )

                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: 'docker-trial',
                    snapshotRepo: 'docker-trial'
                )
            }
        }        
        stage('build') {
            tools {
                jdk 'JDK_17'
            }
            steps {
                rtMavenRun (
                    tool: 'MAVEN_DEFAULT',
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: "MAVEN_DEPLOYER"

                )
                rtPublishBuildInfo (
                    serverId: "ARTIFACTORY_SERVER"
                )
            }
        }
        stage('SonarCloud Analysis') {
            steps {
                withSonarQubeEnv('SONAR_CLOUD') {
                    sh "mvn sonar:sonar -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} -Dsonar.organization=${env.SONAR_ORGANIZATION} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${env.SONAR_TOKEN}"
                }
            }
        }        
        stage('post action') {
            steps {
                archiveArtifacts artifacts: '**/*.jar',
                                 onlyIfSuccessful: false
                junit testResults: '**/test-*.xml'
            }
        }
    }
    post {
    success {
        mail subject: "Jenkins Build of ${JOB_NAME} with id ${BUILD_ID} is success",
            body: "Use this URL ${BUILD_URL} for more info",
            to: 'deepanmerd@gmail.com'
        }
    failure {
        mail subject: "Jenkins Build of ${JOB_NAME} with id ${BUILD_ID} is failure",
            body: "Use this URL ${BUILD_URL} for more info",
            to: 'deepanmerd@gmail.com'
        }          
    }
}